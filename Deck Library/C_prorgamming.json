[
    {
        "Term": "C Programming Language",
        "Definition": "C is a general-purpose, procedural programming language supporting structured programming, lexical variable scope, and recursion, with a static type system.\n\n**Applications:** System programming, embedded systems, operating systems, compilers.\n\n**Benefits:** Fast execution, direct access to memory, widely used in system-level programming.\n\n**Disadvantages:** Manual memory management, less abstraction compared to other languages.\n\n**Pseudocode:**\n```pseudo\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n```",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Hello World Program",
        "Definition": "The 'Hello, World!' program is a simple program that outputs 'Hello, World!' to the console. It's often used to introduce programming languages.\n\n**C Code Example:**\n```c\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n```\n\n**Explanation:**\n- `#include <stdio.h>`: Includes the standard input/output library.\n- `int main()`: Entry point of the program.\n- `printf(...)`: Function to print text to the console.\n- `return 0;`: Indicates successful program termination.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Variables and Data Types",
        "Definition": "Variables are used to store data, and data types define the kind of data a variable can hold.\n\n**Common Data Types:**\n- `int`: Integer numbers\n- `float`: Floating-point numbers\n- `char`: Single characters\n- `double`: Double-precision floating-point numbers\n\n**C Code Example:**\n```c\nint age = 25;\nfloat height = 5.9;\nchar initial = 'A';\ndouble pi = 3.14159;\n```\n\n**Explanation:**\n- `int age = 25;`: Declares an integer variable named `age` with a value of 25.\n- `float height = 5.9;`: Declares a floating-point variable named `height` with a value of 5.9.\n- `char initial = 'A';`: Declares a character variable named `initial` with a value of 'A'.\n- `double pi = 3.14159;`: Declares a double-precision floating-point variable named `pi` with a value of 3.14159.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Arithmetic Operators",
        "Definition": "Arithmetic operators are used to perform mathematical operations on variables and values.\n\n**Operators:**\n- `+`: Addition\n- `-`: Subtraction\n- `*`: Multiplication\n- `/`: Division\n- `%`: Modulus (remainder)\n\n**C Code Example:**\n```c\nint a = 10, b = 3;\nint sum = a + b; // 13\nint diff = a - b; // 7\nint prod = a * b; // 30\nint quotient = a / b; // 3\nint remainder = a % b; // 1\n```\n\n**Explanation:**\n- `int sum = a + b;`: Adds `a` and `b`, storing the result in `sum`.\n- `int diff = a - b;`: Subtracts `b` from `a`, storing the result in `diff`.\n- `int prod = a * b;`: Multiplies `a` and `b`, storing the result in `prod`.\n- `int quotient = a / b;`: Divides `a` by `b`, storing the quotient in `quotient`.\n- `int remainder = a % b;`: Divides `a` by `b`, storing the remainder in `remainder`.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Conditional Statements",
        "Definition": "Conditional statements allow the program to make decisions based on conditions.\n\n**Types:**\n- `if`\n- `else if`\n- `else`\n\n**C Code Example:**\n```c\nint age = 18;\n\nif (age >= 18) {\n    printf(\"You are an adult.\\n\");\n} else {\n    printf(\"You are a minor.\\n\");\n}\n```\n\n**Explanation:**\n- `if (age >= 18)`: Checks if `age` is 18 or older.\n- `printf(\"You are an adult.\\n\");`: Executes if the condition is true.\n- `else`: Executes the following block if the condition is false.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Loops",
        "Definition": "Loops are used to execute a block of code repeatedly.\n\n**Types:**\n- `for`\n- `while`\n- `do-while`\n\n**C Code Example (for loop):**\n```c\nfor (int i = 0; i < 5; i++) {\n    printf(\"Iteration %d\\n\", i);\n}\n```\n\n**C Code Example (while loop):**\n```c\nint i = 0;\nwhile (i < 5) {\n    printf(\"Iteration %d\\n\", i);\n    i++;\n}\n```\n\n**Explanation:**\n- `for (int i = 0; i < 5; i++)`: A loop that runs five times, incrementing `i` each time.\n- `while (i < 5)`: A loop that runs while `i` is less than 5, incrementing `i` each time.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Functions",
        "Definition": "Functions are blocks of code that perform a specific task and can be reused in a program.\n\n**C Code Example:**\n```c\n#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int sum = add(5, 3);\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}\n```\n\n**Explanation:**\n- `int add(int a, int b)`: Declares a function `add` that takes two integers as arguments and returns their sum.\n- `int sum = add(5, 3);`: Calls the `add` function with arguments 5 and 3, storing the result in `sum`.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Arrays",
        "Definition": "An array is a collection of elements of the same type stored in contiguous memory locations.\n\n**C Code Example:**\n```c\nint numbers[5] = {1, 2, 3, 4, 5};\n\nfor (int i = 0; i < 5; i++) {\n    printf(\"Element %d: %d\\n\", i, numbers[i]);\n}\n```\n\n**Explanation:**\n- `int numbers[5] = {1, 2, 3, 4, 5};`: Declares an array `numbers` with five elements.\n- `numbers[i]`: Accesses the element at index `i`.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Pointers",
        "Definition": "Pointers are variables that store the memory address of another variable.\n\n**C Code Example:**\n```c\nint value = 10;\nint *ptr = &value;\n\nprintf(\"Value: %d\\n\", *ptr);\n```\n\n**Explanation:**\n- `int *ptr = &value;`: Declares a pointer `ptr` that stores the address of `value`.\n- `*ptr`: Dereferences the pointer, accessing the value at the memory address.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Structures",
        "Definition": "Structures are user-defined data types that allow grouping of variables of different types.\n\n**C Code Example:**\n```c\nstruct Person {\n    char name[50];\n    int age;\n};\n\nstruct Person person1;\nperson1.age = 30;\n```\n\n**Explanation:**\n- `struct Person`: Declares a structure `Person` with a `name` and an `age`.\n- `person1.age = 30;`: Sets the `age` field of `person1` to 30.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Input and Output",
        "Definition": "C provides various functions for input and output operations.\n\n**Common Functions:**\n- `printf`: Outputs formatted data to the console.\n- `scanf`: Reads formatted input from the console.\n\n**C Code Example:**\n```c\nint age;\nprintf(\"Enter your age: \");\nscanf(\"%d\", &age);\n\nprintf(\"You are %d years old.\\n\", age);\n```\n\n**Explanation:**\n- `printf(\"Enter your age: \");`: Prints a prompt to enter age.\n- `scanf(\"%d\", &age);`: Reads an integer input from the user and stores it in `age`.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Memory Management",
        "Definition": "C provides functions for manual memory management using dynamic memory allocation.\n\n**Common Functions:**\n- `malloc`: Allocates memory.\n- `free`: Deallocates memory.\n\n**C Code Example:**\n```c\nint *arr = (int *)malloc(5 * sizeof(int));\n\nif (arr == NULL) {\n    printf(\"Memory allocation failed!\\n\");\n    return 1;\n}\n\nfree(arr);\n```\n\n**Explanation:**\n- `malloc(5 * sizeof(int))`: Allocates memory for an array of five integers.\n- `free(arr);`: Frees the allocated memory.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "File Operations",
        "Definition": "C provides functions to perform operations on files such as reading and writing.\n\n**Common Functions:**\n- `fopen`: Opens a file.\n- `fclose`: Closes a file.\n- `fprintf`: Writes to a file.\n- `fscanf`: Reads from a file.\n\n**C Code Example:**\n```c\nFILE *file = fopen(\"data.txt\", \"w\");\n\nif (file != NULL) {\n    fprintf(file, \"Hello, File!\\n\");\n    fclose(file);\n}\n```\n\n**Explanation:**\n- `fopen(\"data.txt\", \"w\")`: Opens `data.txt` for writing.\n- `fprintf(file, \"Hello, File!\\n\");`: Writes to the file.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Preprocessor Directives",
        "Definition": "Preprocessor directives are commands that give instructions to the compiler to preprocess the information before actual compilation starts.\n\n**Common Directives:**\n- `#include`: Includes the contents of a file.\n- `#define`: Defines a macro.\n- `#ifdef`, `#endif`: Conditional compilation.\n\n**C Code Example:**\n```c\n#define PI 3.14\n\n#ifdef DEBUG\nprintf(\"Debug mode\\n\");\n#endif\n```\n\n**Explanation:**\n- `#define PI 3.14`: Defines a macro `PI` with a value of 3.14.\n- `#ifdef DEBUG`: Conditional compilation block for `DEBUG`.",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Fill in the Blank - Array Initialization",
        "Definition": "Complete the code to initialize an array of integers:\n```c\nint numbers[3] = {1, 2, 3};\n```\n",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Fill in the Blank - Looping Structure",
        "Definition": "Complete the code to print numbers from 1 to 5 using a for loop:\n```c\nfor (int i = 1; i <= 5; i++) {\n    printf(\"%d\\n\", i);\n}\n```\n",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Fill in the Blank - Function Definition",
        "Definition": "Complete the code to define a function that adds two numbers:\n```c\nint add(int a, int b) {\n    return a + b;\n}\n```\n",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    },
    {
        "Term": "Fill in the Blank - File Writing",
        "Definition": "Complete the code to write 'Hello, World!' to a file:\n```c\nFILE *file = fopen(\"output.txt\", \"w\");\nif (file != NULL) {\n    fprintf(file, \"Hello, World!\\n\");\n    fclose(file);\n}\n```\n",
        "CorrectCount": 0,
        "LastReview": "2024-08-05T00:00:00Z",
        "NextReview": "2024-08-06T00:00:00Z"
    }
]
